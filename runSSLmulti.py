#! /usr/bin/env python

from multiprocessing import Queue
import multiprocessing
import commands
import sys
import argparse
import os

origPath = os.getcwd()
toolsPath = "/tmp/tools"
tlssledPath = toolsPath+"/"
numProcesses = 10

def RunCommand(fullCmd):
    try:
        return commands.getoutput(fullCmd)
    except:
        return "Error executing command %s" %(fullCmd)
class Worker1(multiprocessing.Process):
 
    def __init__(self,
            work_queue,
            result_queue,
          ):
        multiprocessing.Process.__init__(self)
        self.work_queue = work_queue
        self.result_queue = result_queue
        self.kill_received = False
    def run(self):
        while (not (self.kill_received)) and (self.work_queue.empty()==False):
            try:
                job = self.work_queue.get_nowait()
            except:
                break
            (jobid,hostNo,runCmd) = job       
            rtnVal = (jobid,hostNo,RunCommand(runCmd))
            self.result_queue.put(rtnVal)
        
def execute1(jobs, num_processes=2):
    work_queue = multiprocessing.Queue()
    for job in jobs:
        work_queue.put(job)
 
    result_queue = multiprocessing.Queue()
    worker = []
    for i in range(num_processes):
        worker.append(Worker1(work_queue, result_queue))
        worker[i].start()
    
    results = []
    while len(results) < len(jobs): 
        result = result_queue.get()
        results.append(result)
    results.sort() 
    return (results) 
os.chdir(origPath)

sslList=[]

def runModules(quiet):
	#Start of Module
	results = "\n- Checking for SSLv2"
	print results
	jobs = [] 
	jobid = 0

	for host in sslList:
    		fullCmd = "nmap -sV -sC "+host[0]+" -p "+host[1]
		if quiet==False:
    			print fullCmd
    		jobs.append((jobid,host[0],fullCmd)) 
    		jobid = jobid+1    
	resultsList = execute1(jobs,numProcesses)
	for i in resultsList:
		if "SSLv2 supported" in str(i):
			print line
	#End of Module

	#Start of Module
	results = "\n- Checking for Known SSL Keys"
	print results
	jobs = [] 
	jobid = 0

	for host in sslList:
    		fullCmd = "nmap --script ssl-known-key "+host[0]+" -p "+host[1]
		if quiet==False:
	    		print fullCmd
    		jobs.append((jobid,host[0],fullCmd)) 
    		jobid = jobid+1    
	resultsList = execute1(jobs,numProcesses)
	for i in resultsList:
    		resultsList1 =  i[2].split("\n")
    		tempTitle = ""
    		for line in resultsList1:
        		line = line.strip()
			if "ssl-known-key" in line:
				print line
	#End of Module

	#Start of Module
	results = "\n- Checking for SSL ChangeCipherSpec flaw"
	print results
	jobs = [] 
	jobid = 0

	for host in sslList:
    		fullCmd = "python "+toolsPath+"/OSSL_CCS_InjectTest.py "+host[0]+" "+host[1]
		if quiet==False:
	    		print fullCmd
    		jobs.append((jobid,host[0],fullCmd)) 
    		jobid = jobid+1    
	resultsList = execute1(jobs,numProcesses)
	for i in resultsList:
    		resultsList1 =  i[2].split("\n")
    		tempTitle = ""
    		for line in resultsList1:
        		line = line.strip()
			if "may allow early" in line:
				print line
	#End of Module

	#Start of Module
	results = "\n- Running Nmap Heartbleed Module"
	print results
	jobs = [] 
	jobid = 0
	
	for host in sslList:
    		fullCmd = "nmap -p "+host[1]+" --script ssl-heartbleed "+host[0]
		if quiet==False:
	    		print fullCmd
    		jobs.append((jobid,host[0],fullCmd)) 
    		jobid = jobid+1    
	resultsList = execute1(jobs,numProcesses)
	for i in resultsList:
    		resultsList1 =  i[2].split("\n")
    		if "error" not in str(i).lower() and "filtered" not in str(i).lower():	
			for x in resultsList1:
				print x
	#End of Module

	#Start of Module
	results = "\n- Running Tlssled"
	print results
	jobs = [] 
	jobid = 0
	
	for host in sslList:
    		fullCmd = tlssledPath+"TLSSLed_v1.3.sh "+host[0]+" "+host[1]
		if quiet==False:
	    		print fullCmd
    		jobs.append((jobid,host[0],fullCmd)) 
    		jobid = jobid+1    
	resultsList = execute1(jobs,numProcesses)
	insecureSSLList=[]

	for i in resultsList:
    		resultsList1 =  i[2].split("\n")
    		tempTitle = ""
		count=0
    
    		for line in resultsList1:
        		line = line.strip()
        		if "Running sslscan on" in line:
            			tempTitle = line
				count=1
			if "40 bits" in line or "56 bits" in line:
				if count==1:
					insecureSSLList.append(tempTitle)				
					count=0
				insecureSSLList.append(line)
        		if "Secure Renegotiation IS supported" in line:
            			print "\n"+tempTitle
            			print "- Secure SSL/TLS renegotiation"
            			print line
        		if "(CI) SSL/TLS renegotiation IS enabled" in line:
            			print "- Insecure SSL/TLS renegotiation"
            			print line
        		if " SSLv3" in line and "CBC" in line:
            			print line

	#End of Module
	print "\nWeak 40bits or 56bits TLS/SSL Ciphers"
	for item in insecureSSLList:
		print item

	#Start of Module
	results = "\n- Getting Common Names from SSL Certificates"
	print results
	jobs = [] 
	jobid = 0
	
	for host in sslList:
                fullCmd = "nmap --script=ssl-cert -p "+host[1]+" "+host[0]
		if quiet==False:
	    		print fullCmd
    		jobs.append((jobid,host[0],fullCmd)) 
    		jobid = jobid+1    
	resultsList = execute1(jobs,numProcesses)
	print "\n"
	for i in resultsList:
    		resultsList1 =  i[2].split("\n")
		for x in resultsList1:
			if "| ssl-cert: Subject: commonName=" in x and "*." not in x:
				hostName = x.replace("| ssl-cert: Subject: commonName=","").split("/")[0]
				print host[0]+"\t"+hostName
	#End of Module

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-quiet', action='store_true', help='[only show results]')
    parser.add_argument('-file', dest='filename',  action='store', help='[file containing IPs and Ports]')
    parser.add_argument('-threads', dest='numProcesses',  action='store', help='[number of threads]')

    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)

    options = parser.parse_args()
    if options.numProcesses:
	numProcesses=int(options.numProcesses)
    else:
	numProcesses=int(10)
    if not options.filename:
        parser.print_help()
        sys.exit(1)
    else:
	with open(options.filename) as f:
    		for line in f:
        		line = line.strip()
        		line1 = line.split(":")
        		hostNo = line1[0]
        		hostPort = line1[1]
        		sslList.append((hostNo,hostPort))

    if options.quiet:
	runModules(quiet=True)
    else:
	runModules(quiet=False)
